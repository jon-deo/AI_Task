// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// CELEBRITY MODELS
// ================================

model Celebrity {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  sport        Sport
  position     String?
  team         String?
  nationality  String
  birthDate    DateTime?
  biography    String   @db.Text
  achievements String[] @default([])
  imageUrl     String?
  thumbnailUrl String?
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)

  // Social media links
  socialLinks  Json?    // { twitter, instagram, facebook, etc. }

  // SEO and metadata
  metaTitle       String?
  metaDescription String?
  keywords        String[] @default([])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  videoReels     VideoReel[]
  generationJobs GenerationJob[]

  // Indexes for performance
  @@index([sport, isActive])
  @@index([name])
  @@index([slug])
  @@index([createdAt])
  @@map("celebrities")
}

// ================================
// VIDEO REEL MODELS
// ================================

model VideoReel {
  id          String      @id @default(cuid())
  slug        String      @unique
  celebrityId String
  title       String
  description String      @db.Text
  script      String      @db.Text

  // Video file information
  videoUrl     String
  thumbnailUrl String
  duration     Int         // in seconds
  fileSize     BigInt      // in bytes
  resolution   String      // e.g., "1920x1080"
  bitrate      String      // e.g., "1000k"
  format       String      // e.g., "mp4"

  // AWS S3 metadata
  s3Key           String  @unique
  s3Bucket        String
  cloudFrontUrl   String?

  // AI generation metadata
  aiModel         String? // e.g., "gpt-4-turbo-preview"
  voiceModel      String? // e.g., "polly-neural"
  voiceType       VoiceType?
  processingTime  Int?    // in seconds
  generationCost  Decimal? @db.Decimal(10, 4) // in USD

  // Content status and moderation
  status          VideoStatus @default(PENDING)
  moderationFlags Json?       // Content moderation flags

  // SEO and discoverability
  tags         String[] @default([])
  categories   String[] @default([])
  isPublic     Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  isPremium    Boolean  @default(false)

  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  celebrity    Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([celebrityId, status])
  @@index([status, isPublic])
  @@index([createdAt, status])
  @@index([publishedAt])
  @@index([isFeatured, isPublic])
  @@index([tags])
  @@map("video_reels")
}

// ================================
// GENERATION JOB MODELS
// ================================

model GenerationJob {
  id          String           @id @default(cuid())
  celebrityId String
  status      GenerationStatus @default(PENDING)
  progress    Int             @default(0)
  error       String?
  
  // Generation parameters
  voiceType       VoiceType?
  quality         String?     // e.g., "1080p"
  duration        Int?        // in seconds
  includeSubtitles Boolean    @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  celebrity Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([celebrityId])
  @@index([status])
  @@index([createdAt])
  @@map("generation_jobs")
}

// ================================
// ENUMS
// ================================

enum Sport {
  FOOTBALL
  BASKETBALL
  BASEBALL
  SOCCER
  TENNIS
  GOLF
  HOCKEY
  BOXING
  MMA
  CRICKET
  RUGBY
  VOLLEYBALL
  SWIMMING
  ATHLETICS
  CYCLING
  MOTORSPORT
  OTHER
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  DELETED
}

enum VoiceType {
  MALE_NARRATOR
  FEMALE_NARRATOR
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
